
clock_and_gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00010484  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00010484  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  08000484  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010484  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010484  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000095e  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000233  00000000  00000000  00010e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00011048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  000110d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018216  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000afa  00000000  00000000  00029346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000880fd  00000000  00000000  00029e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b1f3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000118  00000000  00000000  000b1f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000464 	.word	0x08000464

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000464 	.word	0x08000464

080001e8 <SysClockConfig>:
#include "stm32f4xx.h"   // CMSIS header
#include <stdint.h>

volatile uint32_t count = 0;

void SysClockConfig(void){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

	// select HSE (8MHz in system_stm32f4xx.c and in schematics), expected systemclock is 64Mhz, select PLL (M=25, N=128, 	P=2)


	// 1. Enabel HSE and wait HSE become ready
	RCC->CR |= RCC_CR_HSEON;
 80001ec:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <SysClockConfig+0xbc>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a2c      	ldr	r2, [pc, #176]	; (80002a4 <SysClockConfig+0xbc>)
 80001f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001f6:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)){}
 80001f8:	bf00      	nop
 80001fa:	4b2a      	ldr	r3, [pc, #168]	; (80002a4 <SysClockConfig+0xbc>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <SysClockConfig+0x12>

	// 2. Set the power enable clock and voltage regulator
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000206:	4b27      	ldr	r3, [pc, #156]	; (80002a4 <SysClockConfig+0xbc>)
 8000208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020a:	4a26      	ldr	r2, [pc, #152]	; (80002a4 <SysClockConfig+0xbc>)
 800020c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000210:	6413      	str	r3, [r2, #64]	; 0x40
	//because I just want to run at 64MHz, I choose scale 2 mode (<144MHz) to save energy
	PWR->CR &= ~(1 << 14);
 8000212:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <SysClockConfig+0xc0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a24      	ldr	r2, [pc, #144]	; (80002a8 <SysClockConfig+0xc0>)
 8000218:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800021c:	6013      	str	r3, [r2, #0]

	// 3. Config the Flash prefetch and LATENCY Related Settings
	FLASH->ACR = FLASH_ACR_LATENCY_2WS | FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN;
 800021e:	4b23      	ldr	r3, [pc, #140]	; (80002ac <SysClockConfig+0xc4>)
 8000220:	f240 7202 	movw	r2, #1794	; 0x702
 8000224:	601a      	str	r2, [r3, #0]

	// 4. Config the prescaler HCLK, PCKL1, PCKL2
	RCC->CFGR &= ~(RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2);
 8000226:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <SysClockConfig+0xbc>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	4a1e      	ldr	r2, [pc, #120]	; (80002a4 <SysClockConfig+0xbc>)
 800022c:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000230:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000234:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1; //SET AHB PRESCALER
 8000236:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <SysClockConfig+0xbc>)
 8000238:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <SysClockConfig+0xbc>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2; //SET APB1 PRESCALER
 800023e:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <SysClockConfig+0xbc>)
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	4a18      	ldr	r2, [pc, #96]	; (80002a4 <SysClockConfig+0xbc>)
 8000244:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000248:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; //SET APB2 PRESCALER
 800024a:	4b16      	ldr	r3, [pc, #88]	; (80002a4 <SysClockConfig+0xbc>)
 800024c:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <SysClockConfig+0xbc>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	6093      	str	r3, [r2, #8]

	//5. Config the main PLL
	RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSE | (0 << 16) | (64 << 6) | (4 << 0));
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <SysClockConfig+0xbc>)
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <SysClockConfig+0xc8>)
 8000256:	605a      	str	r2, [r3, #4]

	// 6. Enable PLL and wait for it become ready
	RCC->CR |= RCC_CR_PLLON;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <SysClockConfig+0xbc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <SysClockConfig+0xbc>)
 800025e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000262:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000264:	bf00      	nop
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <SysClockConfig+0xbc>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f9      	beq.n	8000266 <SysClockConfig+0x7e>

	// 7. Select the clock source and wait for it to be set
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000272:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <SysClockConfig+0xbc>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a0b      	ldr	r2, [pc, #44]	; (80002a4 <SysClockConfig+0xbc>)
 8000278:	f023 0303 	bic.w	r3, r3, #3
 800027c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800027e:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <SysClockConfig+0xbc>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <SysClockConfig+0xbc>)
 8000284:	f043 0302 	orr.w	r3, r3, #2
 8000288:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){}
 800028a:	bf00      	nop
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <SysClockConfig+0xbc>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f003 030c 	and.w	r3, r3, #12
 8000294:	2b08      	cmp	r3, #8
 8000296:	d1f9      	bne.n	800028c <SysClockConfig+0xa4>
}
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	40023800 	.word	0x40023800
 80002a8:	40007000 	.word	0x40007000
 80002ac:	40023c00 	.word	0x40023c00
 80002b0:	00401004 	.word	0x00401004

080002b4 <GPIO_Config>:

void GPIO_Config(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	 * 2. Set the pin as output
	 * 3. Configure OUTPUT mode
	 */

	// 1. Enable GPIO clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <GPIO_Config+0x44>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <GPIO_Config+0x44>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30

	// 2. Set the pin as output
	GPIOD->MODER &= ~((0x3 << 30) | (0x3 << 28) | (0x3 << 26) | (0x3 << 24)); //CLEAR
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <GPIO_Config+0x48>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0c      	ldr	r2, [pc, #48]	; (80002fc <GPIO_Config+0x48>)
 80002ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= ((0x1 << 30) | (0x1 << 28) | (0x1 << 26) | (0x1 << 24)); // SET OUPUT FOR PD12->15
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <GPIO_Config+0x48>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a09      	ldr	r2, [pc, #36]	; (80002fc <GPIO_Config+0x48>)
 80002d6:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002da:	6013      	str	r3, [r2, #0]

	// 3. Configure OUTPUT mode
	GPIOD->OTYPER = 0; //MODE PUSH-PULL
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <GPIO_Config+0x48>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
	GPIOD->OSPEEDR = 0; //MODE LOW SPEED
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <GPIO_Config+0x48>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
	GPIOD->PUPDR = 0; //MODE No pull-up, pull-down
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <GPIO_Config+0x48>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40023800 	.word	0x40023800
 80002fc:	40020c00 	.word	0x40020c00

08000300 <delay>:

void delay(volatile uint32_t time) {
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
    while (time--);
 8000308:	bf00      	nop
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	1e5a      	subs	r2, r3, #1
 800030e:	607a      	str	r2, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1fa      	bne.n	800030a <delay+0xa>
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <main>:

int main(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	SysClockConfig();
 8000328:	f7ff ff5e 	bl	80001e8 <SysClockConfig>
	GPIO_Config();
 800032c:	f7ff ffc2 	bl	80002b4 <GPIO_Config>

    while (1) {
    	GPIOD->BSRR |= (1<<12);
 8000330:	4b19      	ldr	r3, [pc, #100]	; (8000398 <main+0x74>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a18      	ldr	r2, [pc, #96]	; (8000398 <main+0x74>)
 8000336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033a:	6193      	str	r3, [r2, #24]
    	delay(1000000);
 800033c:	4817      	ldr	r0, [pc, #92]	; (800039c <main+0x78>)
 800033e:	f7ff ffdf 	bl	8000300 <delay>
    	GPIOD->BSRR |= (1<<13);
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <main+0x74>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <main+0x74>)
 8000348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034c:	6193      	str	r3, [r2, #24]
    	delay(1000000);
 800034e:	4813      	ldr	r0, [pc, #76]	; (800039c <main+0x78>)
 8000350:	f7ff ffd6 	bl	8000300 <delay>
    	GPIOD->BSRR |= (1<<14);
 8000354:	4b10      	ldr	r3, [pc, #64]	; (8000398 <main+0x74>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <main+0x74>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6193      	str	r3, [r2, #24]
    	delay(1000000);
 8000360:	480e      	ldr	r0, [pc, #56]	; (800039c <main+0x78>)
 8000362:	f7ff ffcd 	bl	8000300 <delay>
    	GPIOD->BSRR |= (1<<15);
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <main+0x74>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <main+0x74>)
 800036c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000370:	6193      	str	r3, [r2, #24]
    	delay(1000000);
 8000372:	480a      	ldr	r0, [pc, #40]	; (800039c <main+0x78>)
 8000374:	f7ff ffc4 	bl	8000300 <delay>
    	GPIOD->BSRR |= (0b1111 << 12) << 16;
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <main+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a06      	ldr	r2, [pc, #24]	; (8000398 <main+0x74>)
 800037e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000382:	6193      	str	r3, [r2, #24]
    	delay(1000000);
 8000384:	4805      	ldr	r0, [pc, #20]	; (800039c <main+0x78>)
 8000386:	f7ff ffbb 	bl	8000300 <delay>
        count++;                             // Tăng biến đếm
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <main+0x7c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <main+0x7c>)
 8000392:	6013      	str	r3, [r2, #0]
    	GPIOD->BSRR |= (1<<12);
 8000394:	e7cc      	b.n	8000330 <main+0xc>
 8000396:	bf00      	nop
 8000398:	40020c00 	.word	0x40020c00
 800039c:	000f4240 	.word	0x000f4240
 80003a0:	2000001c 	.word	0x2000001c

080003a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <SystemInit+0x20>)
 80003aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ae:	4a05      	ldr	r2, [pc, #20]	; (80003c4 <SystemInit+0x20>)
 80003b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	e000ed00 	.word	0xe000ed00

080003c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c8:	480d      	ldr	r0, [pc, #52]	; (8000400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003cc:	f7ff ffea 	bl	80003a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480c      	ldr	r0, [pc, #48]	; (8000404 <LoopForever+0x6>)
  ldr r1, =_edata
 80003d2:	490d      	ldr	r1, [pc, #52]	; (8000408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d4:	4a0d      	ldr	r2, [pc, #52]	; (800040c <LoopForever+0xe>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e8:	4c0a      	ldr	r4, [pc, #40]	; (8000414 <LoopForever+0x16>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f6:	f000 f811 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fa:	f7ff ff93 	bl	8000324 <main>

080003fe <LoopForever>:

LoopForever:
  b LoopForever
 80003fe:	e7fe      	b.n	80003fe <LoopForever>
  ldr   r0, =_estack
 8000400:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000408:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800040c:	08000484 	.word	0x08000484
  ldr r2, =_sbss
 8000410:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000414:	20000020 	.word	0x20000020

08000418 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000418:	e7fe      	b.n	8000418 <ADC_IRQHandler>
	...

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4d0d      	ldr	r5, [pc, #52]	; (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2600      	movs	r6, #0
 8000428:	42a6      	cmp	r6, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4d0b      	ldr	r5, [pc, #44]	; (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	; (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1b64      	subs	r4, r4, r5
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2600      	movs	r6, #0
 800043a:	42a6      	cmp	r6, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f855 3b04 	ldr.w	r3, [r5], #4
 8000444:	4798      	blx	r3
 8000446:	3601      	adds	r6, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f855 3b04 	ldr.w	r3, [r5], #4
 800044e:	4798      	blx	r3
 8000450:	3601      	adds	r6, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
